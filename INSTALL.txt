** INSTALLATION

The recommended way to install amusewiki is via
http://packages.amusewiki.org, where a debian repository with the
packages is provided. If you want to install manually, read on,
otherwise skip this document.

The installation of amusewiki takes time (depending on speed of the
machine and of the network) and requires about 5Gb of disk space
because of the full installation of TeXlive. If you're short on disk
space, don't even start to install (the app will create files at full
speed anyway, so consider 10Gb for a reasonable start).

On a slow server, it takes 2 hours (mostly spent on installing and
testing Perl modules, and 20 minutes to download and install the full
TeXlive 2015), but the procedure is fully automated, so start it,
check if it bails out at the beginning, forget about it for an hour or
two (run it under screen), then come back later and finish it up to
complete it for the operations which require root privileges (notably
the webserver configuration). The last lines of output is what
matters. It will tell you about the needed changes to the $PATH for
TeXlive, and where to login. From there you should be be able to
create and configure new sites from the admin console under
/admin/sites. [1]

The supported and recommended setup is nginx + FCGI. The FCGI setup
should work with Apache as well, but it's not currently actively
supported. perldoc Catalyst::Manual::Deployment::Apache::FastCGI
should help, though.

Prerequisites:

 - a database (mysql, pg, sqlite are supported)
 - a working perl (i.e., you can install modules with cpanm without
   warnings). Usually this means you have to install liblocal-lib-perl
   and cpanminus in Debian (or you install perl in your home).
 - fontconfig (install it before installing texlive)
 - graphicsmagick (for thumbnails) and imagemagick (for preview generation)
 - a mime-info database: shared-mime-info on debian
 - fcgiwrap running and listening to /var/run/fcgiwrap.socket (as in debian)
 - a dedicated system user (with a clean home) which is going to run the site
 - SSL binaries and development libraries (openssl and libssl-dev)
 - Xapian libraries and development files (xapian-tools libxapian-dev)
 - commonly used utilities: unzip, wget, git, rsync

Log in as the user you want to run the site.

If you have a system wide perl, to install modules in your home you
should install local::lib (liblocal-lib-perl on Debian) and add to
.bashrc:

 eval `perl -Mlocal::lib`

Logout and login again.

Unpack the sources (or clone the repo) and change directory into them.

Install the prerequisites and complete the installation with:

 ./script/install.sh

The script is going to take care of the installation in a
non-interactive fashion, picking resonable defaults.

The output is copious, but you need only the last lines. Setting up
the $PATH as shown in the script output in your bashrc (or equivalent)
is crucial.

** CONFIGURE THE INITIAL SITE

Create a database for the application. E.g., for mysql:

  mysql> create database amuse DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  mysql> grant all privileges on amuse.* to amuse@localhost identified by XXX

Or, for postgres:

Login as root.

 su - postgres
 psql
 create user amuse with password 'XXXX';
 create database amuse owner amuse;

For sqlite no setup is required.

Copy dbic.yaml.<dbtype>.example to dbic.yaml and adjust the
credentials, and chmod it to 600. (For sqlite is good as it is).

If you have multiple amusewiki instance on the same machine, see below
before proceeding (you probably want to tweak the configuration)

Configure the initial site with:

 ./script/configure.sh [ hostname ]

Please note that the installation procedure will create a mirror of
amusewiki.org under the subdomain amusewiki.<your domain>, where <your
domain> is the output of `hostname -d`. Nothing you can't change later
from the admin console, but you need to access it. You can pass the
desired hostname as first argument to the configure script.

** USAGE

To set the number of FCGI workers, set the environment variable
AMW_WORKERS (defaults to 3).

  export AMW_WORKERS=5

To start/stop/restart the application:

  ./init-all start
  ./init-all stop
  ./init-all restart

To regenerate the nginx configuration after adding a site:

  ./script/amusewiki-generate-nginx-conf

(and read the output).


** MULTIPLE INSTALLATIONS

If you run a Debian machine and you have only one instance running and
if you have the port 9015 free, you don't need any of this.

Please note: "multiple instances" doesn't mean "multiple sites". On a
single instance you can have as many sites as you want.

The interaction between nginx and the application, including cgit, is
controlled by the Webserver model. You can configure it creating a
file in the application root named amusewikifarm_local.conf with this
content (here listed with the defaults).

<Model::Webserver>
    # cgit port
    cgit_port 9015
    log_format combined
    nginx_root /etc/nginx
    instance_name amusewiki
    fcgiwrap_socket /var/run/fcgiwrap.socket
</Model::Webserver>

The instance_name is just a string used to create the nginx
configuration files to avoid conflicts with other installations. So
you may have one instance named "testing" and the other "live".




[1] You can speed up the installation by installing most of the
required perl modules with your package manager, though. For TeX live
we check if xetex and xelatex are present in
$HOME/texlive/2015/bin/<arch> If you feel brave and in great need of
disk space, you can fool the installer by creating that dir and
symlinking xetex and xelatex there. But you're on your own if you're
missing latex pieces, fonts, etc. You have been warned.

** FreeBSD

pkg install perl5 p5-App-cpanminus git texlive-full-20150521 p5-Catalyst-Runtime \
    p5-Catalyst-Devel cgit p5-local-lib \
    GraphicsMagick p5-Catalyst-Runtime shared-mime-info xapian-core xapian-bindings \
    p5-Search-Xapian nginx unzip rsync wget p5-Daemon-Control bash \
    p5-Module-Install \
p5-DBIx-Class p5-DBIx-Class-Schema-Loader p5-DBIx-Class-PassphraseColumn \
p5-DBIx-Class-DeploymentHandler p5-DBIx-Class-Helpers p5-DBIx-Class-Schema-Config \
p5-DateTime-Format-SQLite p5-DateTime-Format-RFC3339 p5-DateTime-Format-MySQL  \
p5-DateTime-Format-Pg \
p5-FCGI p5-FCGI-ProcManager p5-Unicode-Collate p5-DBD-SQLite \
p5-MIME-Types \
p5-Locale-Maketext-Lexicon p5-Locale-PO p5-File-MimeInfo \
p5-Protocol-ACME \
p5-CAM-PDF                    \
p5-Test-Differences                       \
p5-Catalyst-Runtime                       \
p5-Catalyst-Plugin-ConfigLoader           \
p5-Catalyst-Plugin-Authentication         \
p5-Catalyst-Plugin-Session                \
p5-Catalyst-Plugin-Session-Store-FastMmap \
p5-Catalyst-Plugin-Session-State-Cookie   \
p5-Catalyst-Plugin-Authorization-Roles    \
p5-Catalyst-View-TT                       \
p5-Catalyst-Action-RenderView             \
p5-Moose                                  \
p5-namespace-autoclean                    \
p5-Test-WWW-Mechanize-Catalyst            \
p5-Term-Size-Any                          \
p5-MIME-Types                             \
p5-FCGI                                   \
p5-FCGI-ProcManager                       \
p5-Unicode-Collate                        \
p5-DBIx-Class                             \
p5-DBD-SQLite                             \
p5-Daemon-Control                         \
p5-MooseX-NonMoose                        \
p5-JSON                                   \
p5-JSON-XS                                \
p5-DBIx-Class-Schema-Loader               \
p5-SQL-Translator                         \
p5-DBIx-Class-Schema-Config               \
p5-DBIx-Class-PassphraseColumn            \
p5-DateTime                               \
p5-DateTime-Format-SQLite                 \
p5-DateTime-Format-MySQL                  \
p5-DateTime-Format-Pg                     \
p5-DateTime-Format-Strptime               \
p5-XML-FeedPP                             \
p5-XML-Atom                               \
p5-Git-Wrapper                            \
p5-Text-Wrapper                           \
p5-Email-Valid                            \
p5-File-Copy-Recursive                    \
p5-Search-Xapian                          \
p5-Catalyst-Model-Adaptor                 \
p5-Text-Unidecode                         \
p5-Log-Contextual                         \
p5-Log-Log4perl                           \
p5-Log-Dispatch                           \
p5-Log-Dispatch-File-Stamped              \
p5-Email-Sender                           \
p5-HTTP-Tiny            \
p5-MooseX-MarkAsMethods \
p5-PDF-API2 \
p5-Bytes-Random-Secure \
p5-Crypt-OpenSSL-X509 \
p5-HTTP-BrowserDetect \
p5-Type-Tiny \
p5-Archive-Zip \
p5-Template-Tiny \
p5-Catalyst-Model-DBIC-Schema

[root@freebsd ~]# adduser 
Username: amusewiki
Full name: Amusewiki
Uid (Leave empty for default): 
Login group [amusewiki]: 
Login group is amusewiki. Invite amusewiki into other groups? []: 
Login class [default]: 
Shell (sh csh tcsh zsh rzsh bash rbash git-shell nologin) [sh]: bash
Home directory [/home/amusewiki]: 
Home directory permissions (Leave empty for default): 
Use password-based authentication? [yes]: no
Lock out the account after creation? [no]: 
Username   : amusewiki
Password   : <disabled>
Full Name  : Amusewiki
Uid        : 1001
Class      : 
Groups     : amusewiki 
Home       : /home/amusewiki
Home Mode  : 
Shell      : /usr/local/bin/bash
Locked     : no
OK? (yes/no): yes
adduser: INFO: Successfully added (amusewiki) to the user database.
Add another user? (yes/no): no
Goodbye!


su - amusewiki
git clone https://github.com/melmothx/amusewiki.git
cd amusewiki
eval `perl -Mlocal::lib`
cpanm --installdeps .
./script/install_fonts.sh
cd font-preview
./gen.sh

