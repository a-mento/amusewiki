* Frontend

** DONE /library display
   CLOSED: [2014-03-14 ven 17:08]

*** DONE DB script to bootstrap the archive
    CLOSED: [2014-01-19 dom 20:44]

*** DONE /library/* routing
    CLOSED: [2014-01-28 mar 22:35]

*** DONE Add to db attachments, so we can route them from /library/* 
    CLOSED: [2014-02-01 sab 10:16]
    We already looked in the db, so let's use it...

*** DONE document directory structure
    CLOSED: [2014-02-08 sab 08:18]


** DONE template migration for the existing libraries
   CLOSED: [2014-03-08 sab 14:45]

** DONE Xapian search plugging
   CLOSED: [2014-03-10 lun 18:29]

** editing

*** /edit

** X-Accel

*** serve static files without catalyst

** /admin

*** site and user creation

** /queue

*** patch manager, individual commits

** users + authentication + roles

*** root user for site creation

*** regular for approvals

*** anon for editing


** DONE Feed
   CLOSED: [2014-03-14 ven 17:08]

*** DONE Force the pubdate and pick the timestamp if there is not any
    CLOSED: [2014-03-13 gio 10:39]
*** DONE Manage the pubdate in the future (also check published_text)
    CLOSED: [2014-03-14 ven 17:08]
*** DONE Update the database
    CLOSED: [2014-03-13 gio 10:39]
*** DONE Create the controller with the DB unrolling
    CLOSED: [2014-03-14 ven 11:33]
*** DONE Add nginx rule to manage the legacy rss.xml with a rewrite to /feed
    CLOSED: [2014-03-14 ven 11:40]

* Backend
** Queue using the db.
** DONE Xapian indexing (Search::Xapian)
   CLOSED: [2014-02-08 sab 12:36]

** DONE compilation: Makefile and muse-quick
   CLOSED: [2014-03-02 dom 10:39]
   Use Text::Amuse::Compile

** TODO bookbuilder Text::Amuse + PDF::Imposition

*** DONE Add a form to each text to add the text to the collection
    CLOSED: [2014-03-14 ven 22:27]
*** DONE Store the text list in the session
    CLOSED: [2014-03-14 ven 22:49]
*** DONE Model for the bookbuilder
    CLOSED: [2014-03-15 sab 23:18]

It should do the validation too, to avoid passing garbage or malicious
stuff to the template.

*** DONE Controller for the bookbuilder
    CLOSED: [2014-03-15 sab 23:18]
*** DONE Add the page to manage the options
    CLOSED: [2014-03-15 sab 23:18]
*** DONE On submit, clear the session and write the job to the queue
    CLOSED: [2014-03-15 sab 23:18]
*** Jobs table with at least these columns:

 - id (job id)
 - site id
 - status (pending, compiling, completed)
 - created
 - completed
 - text_list (as json)
 - compiler_options (for the template, as json)
 - imposer_options  (for the final imposition, if any, may be empty)
 - epub_options (not implemented yet)

*** Job daemon

It should run syncronously with a nice -n 19 in an infinite loop with
a sleep of 10 seconds or so. I guess a query every 10 seconds
shouldn't be too hard to manage.

*** Add a status page where the user can wait for the job, using the queue id.

*** Don't rewrite the tex template

Instead scan the already produced tex file and retrieve the body, do
not reparse the muse. We already have the zip with all the needed
files inside. The epubs have inside the splat html, so unclear what's
better.

*** When is ready offer the link and stop the queue polling.
*** Delete the file after a couple of hours, we are short on resources.

* Needed features
** simple to use
** simple to install
** template management
** page deletion
** category management

* Notes

** Git merging

When pulling from remotes repos, permit only fast-forward. If it
fails, send a mail to the user associated with that repository and
notify the failure.

On post-merge, run make via tiny hook, update xapian and the db.


