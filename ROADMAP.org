* Frontend

** DONE /library display
   CLOSED: [2014-03-14 ven 17:08]

*** DONE DB script to bootstrap the archive
    CLOSED: [2014-01-19 dom 20:44]

*** DONE /library/* routing
    CLOSED: [2014-01-28 mar 22:35]

*** DONE Add to db attachments, so we can route them from /library/* 
    CLOSED: [2014-02-01 sab 10:16]
    We already looked in the db, so let's use it...

*** DONE document directory structure
    CLOSED: [2014-02-08 sab 08:18]

** DONE template migration for the existing libraries
   CLOSED: [2014-03-08 sab 14:45]

** DONE Xapian search plugging
   CLOSED: [2014-03-10 lun 18:29]

** DONE editing
   CLOSED: [2014-03-28 ven 13:16]

*** DONE /special/* pages
    CLOSED: [2014-03-28 ven 13:15]

**** DONE Handle the publishing in the future (optimizitaion)
     CLOSED: [2014-03-28 ven 13:16]
     It should work, more or less

*** DONE /edit
    CLOSED: [2014-03-28 ven 13:16]

** TODO X-Accel

*** serve static files without catalyst

** TODO /admin

*** site and user creation

** /queue

*** patch manager, individual commits

** TODO users + authentication + roles

*** root user for site creation

*** regular for approvals

*** anon for editing

** TODO robot ignores on some pages like the forms

** TODO more substantial tests on access control

** DONE Feed
   CLOSED: [2014-03-14 ven 17:08]

*** DONE Force the pubdate and pick the timestamp if there is not any
    CLOSED: [2014-03-13 gio 10:39]
*** DONE Manage the pubdate in the future (also check published_text)
    CLOSED: [2014-03-14 ven 17:08]
*** DONE Update the database
    CLOSED: [2014-03-13 gio 10:39]
*** DONE Create the controller with the DB unrolling
    CLOSED: [2014-03-14 ven 11:33]
*** DONE Add nginx rule to manage the legacy rss.xml with a rewrite to /feed
    CLOSED: [2014-03-14 ven 11:40]

** TODO support #uid and #cat in Archive::Edit and Utiles::Amuse

** DONE git support in Archive::Edit and Archive
   CLOSED: [2014-04-13 dom 13:39]

** DONE original text in revision Archive::Edit
   CLOSED: [2014-04-12 sab 20:30]

** DONE plug the preprocessor in Schema::Result::Revision
   CLOSED: [2014-04-13 dom 20:07]

** TODO store the pdf attachmentes in a directory by themselves

** DONE when publishing a revision, do not overwrite anything.
   CLOSED: [2014-04-13 dom 13:39]

(and store every change in the git)

** DONE check if the original revision file matches the one we are going to overwrite.
   CLOSED: [2014-04-12 sab 20:30]

Otherwise we have to ask the user to force the operation.

** TODO permanent redirections for legacy naming scheme

** TODO when editing, check that the revision belongs to the same session id
** TODO put the revisions code into the ResultSet::Revision and Result::Revision

Otherwise we go crazy

** TODO Bug: when updating a text, clear the fields.


* Backend
** DONE Queue using the db.
   CLOSED: [2014-03-23 dom 10:00]
** DONE Xapian indexing (Search::Xapian)
   CLOSED: [2014-02-08 sab 12:36]

** DONE compilation: Makefile and muse-quick
   CLOSED: [2014-03-02 dom 10:39]
   Use Text::Amuse::Compile

** DONE bookbuilder Text::Amuse + PDF::Imposition
   CLOSED: [2014-03-23 dom 09:59]

*** DONE Add a form to each text to add the text to the collection
    CLOSED: [2014-03-14 ven 22:27]
*** DONE Store the text list in the session
    CLOSED: [2014-03-14 ven 22:49]
*** DONE Model for the bookbuilder
    CLOSED: [2014-03-15 sab 23:18]

It should do the validation too, to avoid passing garbage or malicious
stuff to the template.

*** DONE Controller for the bookbuilder
    CLOSED: [2014-03-15 sab 23:18]
*** DONE Add the page to manage the options
    CLOSED: [2014-03-15 sab 23:18]
*** DONE On submit, clear the session and write the job to the queue
    CLOSED: [2014-03-15 sab 23:18]
*** DONE Jobs table
    CLOSED: [2014-03-16 dom 15:18]
*** DONE Upgrade Text::Amuse::Compile to support merging
    CLOSED: [2014-03-22 sab 10:59]

Fix the wrong language code when compiling the thing.

*** DONE Use IO::Pipe instead of open |- and such
    CLOSED: [2014-03-23 dom 09:59]

*** DONE Job daemon
    CLOSED: [2014-03-18 mar 22:06]

It should run syncronously with a nice -n 19 in an infinite loop with
a sleep of 10 seconds or so. I guess a query every 10 seconds
shouldn't be too hard to manage.


*** DONE Add a limit in megabyte to the target text
    CLOSED: [2014-03-23 dom 09:59]

*** DONE Add a status page where the user can wait for the job, using the queue id.
    CLOSED: [2014-03-18 mar 22:06]
*** When is ready offer the link and stop the queue polling.
*** Delete the file after a couple of hours, we are short on resources.

* Needed features
** simple to use
** simple to install
** template management
** page deletion
** category management

* Notes

** Git merging

When pulling from remotes repos, permit only fast-forward. If it
fails, send a mail to the user associated with that repository and
notify the failure.

On post-merge, run make via tiny hook, update xapian and the db.


