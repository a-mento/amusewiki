* AmuseWikiFarm

This is a wiki engine based on the Text::Amuse parser, with a Git
backend. The web interface is powered by Catalyst and Plack.

* Modes

AmuseWiki can run in different modes for each site and gives different
permissions to the various user roles.

** Users

We define 4 levels of users.

*** root permissions

The users with root permissions have full access to anything, but most
important, they can create new sites, change settings, add themes,
etc.. The same login works for all the sites. Given that being able to
access the templates means being able to inject code, this role should
be reserved to people that know what they are doing and have a shell
access.

*** librarian permissions

Every site can and should have one or more librarians with login. They
are able to access the revisions, approve the texts, etc. Special
pages are always reserved for them.

They can also create fellow librarians which will share the same
privileges. They are peers and they can create peers.

*** human permissions

This is not strictly speaking a role, because no login is required.
Anyway, to access some part of the sites (adding new texts, editing,
the bookbuilder), a prove that the user is a human and not a bot is
required. This is implemented via a question which the human has to
answer. It takes 10 seconds and after that the humanity of the user is
not questioned any more. Also, they should have cookies enabled
(otherwise we can't store a session for them).

*** robot permissions

Humans which don't prove to be such and robots can access all the
public part, including reading and download.

** Modes

Each site can run in one of these three modes, which differs on the
privileges granted to the humans.

*** blog

This mode restricts access to the text editing to librarians only.
Humans can still use the bookbuilder.

The test site with id '0empty0' works this way.


*** modwiki

This mode is a "moderated wiki". Humans can add new texts and edit
them, but approvals and publishing is reserved to the librarians.

The test site '0blog0' works this way.

*** openwiki

This mode is an "open wiki". Humans can add new texts, edit them, and
the result is published right away. Revisions are kept in the git, so
it's always possible to revert to a previous one (but could be
complicated and messy). Use at your own risk, but it could make sense
as a private wiki or in a LAN.

The test site '0wiki0' works this way.

* Directory structure

** Categories

Normally, topics are free form. This means that the uploader can set
them to whatever she wants. Sometimes this is not what you want, but
you want instead a fixed range of categories. The directive to use is
#cat with a whitespace separated list of categories. Here you should
use codes instead of their real name, and set "category mycode" in the
.po files.

The full list of the fixed categories supported by the site should go
in the "fixed_category_list" column of the "site" table. Everything
else is managed by the code transparently.

** themes

The sites can have a theme defined. In this case, the search path of
TT is extended to root/themes/<theme-name>, where the templates can be
overridden.

** repositories

This is where the texts are stored.

Even if the bootstrapper could look everywhere (it checkes the path
with the Amuse directory conventions, so in theory it could scan
multiple archives too, assuming the filename is unique), the
convention is as follow.

The site ID is the key of everything, given that the whole circus is
based on that, to serve the right file without leaking in other sites.

The max length of the site ID is 16 characters, and with a minimum of
2, in the range [0-9a-z] (no special character, no uppercase).

PLEASE NOTE THAT IDS STARTING WITH ZERO (0) ARE USED AND RESERVED FOR
TESTING. JUST DO NOT ASSIGN IDS WHICH STARTS WITH ZERO.

The directory is "repo", and there reside the git archives, named with
the site ID.

The shipped test archives are named "test" and "blog" and starting
from the root of the application, have the following structure.

repo
├── blog
│   ├── d
│   │   └── dt/file.{muse,...}
│   ├── f
│   │   └── ft/file.{muse,...}
│   └── s
│       └── st/file.{muse,...}
└── test
    ├── d
    │   └── dt/file.{muse,...}
    ├── f
    │   └── ft/file.{muse,...}
    └── s
        └── st/file.{muse,...}


Every account can have one remote git from which the user can pull
from /console (fast-forward only). Root accounts can see all of them
and pull from anywhere.

The name of the remote have to match the username, so username must
have sensible values: ASCII only, alphanumeric, no special characters.

** Xapian

The Xapian databases are located in "xapian", with the same schema:

xapian
├── blog
└── test


** Email notification

On commit emails are sent to the site.mail address, if any, with the
committer in CC, if he minded to leave one. If site.mail is not set
for the site, the whole mailing is skipped, including the notification
to the committer (as we assume we don't want to spam around).

** MCV

Standard location for Catalyst app:

 - lib/AmuseWikiFarm/Model
 - lib/AmuseWikiFarm/View
 - lib/AmuseWikiFarm/Controller

** Templates and public directory:

 - root/static static files (css, js, images)

Deny the following in the webserver configuration:

 - root/themes theme files (override the templates with the same structure)
 - root/src    template directory.


** Special pages

Rendered special pages are stored in the DB. However, a copy for
editing is stored in specials/<site_id>. The module responsible for
editing and storing is AmuseWikiFarm::Archive::Special.

** Local files (favicon.ico, navlogo.png, pagelogo.png, local.css, local.js)

These files may provide an override for cosmetics and features (via
js) without tampering the code. These files should be placed in the
repository, under the directory site_files.

The uri which maps to these files is /sitefiles/<site_id>/<file>,
hence you can get some optimization symlinking the the
repo/<site_id>/site_files directory to root/sitefiles/<site_id> (so
the files are served right away by the webserver.

The navigation logo (navlogo.png) needs (and it's enforced to) an
height of 20px.

If pagelogo.png is present, it will be placed before the latest
entries on the special pages. The assigned ids are
"special-pages-logo" for the container and "special-pages-logo-img"
for the image itself.

** Schema

DBIx::Class schema in lib/AmuseWikiFarm/Schema.pm and its namespace.

SQL scripts in "sql"

** Utils

 - lib/AmuseWikiFarm/Utils

** Javascript packages used

The root of the javascript packages and scripts is "root/static/js"

*** JQuery

*** CKeditor

The configuration is done in place using the "best practice". The
package is not shipped in the source (but could eventually end up in a
release tarball).

CKeditor should be unpacked in root/static/js/ (hence creating the
root 'ckeditor'). The default template (edit/create.tt) asks for
"/static/js/ckeditor/ckeditor.js" and
"/static/js/ckeditor/adapters/jquery.js".

*** Font preview

Execute the gen.sh script in the font-preview directory. If it fails,
you are missing the required fonts.
