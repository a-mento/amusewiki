The packaged amusewiki is maintained upstream and is fully supported.

At installation time, a sample site is installed and a root user is
created. Credentials and activation instructions for nginx are printed
on the screen.

The package creates an user, amusewiki, which owns the repositories
and runs the application. Its home is located at /var/lib/amusewiki.

The package installs some amusewiki-* executables. They are all meant
to be run by amusewiki in its home. /usr/sbin/amusewiki wrapper is
provided to safely run those command as root.

No administration task is usually required, so you can safely ignore
them if you don't have to, with two exceptions: amusewiki-clone-site
(see the manpage) for backups and amusewiki-reset-password for
resetting user passwords from the command line (say you lost the root
user's password...). The site's root user is called "amusewiki". When
you log into the site for the first time, go to /admin/sites to create
a real site, and look at the entries on the top bar to see what you
can do from the web console (all the administration is supposed to be
run from there).

amusewiki starts 3 daemons from systemd: amusewiki-jobber,
amusewiki-cgit and amusewiki-web. If you want to change their
configuration, you can override the unit files from
/lib/systemd/system/amusewiki* copying them into /etc/systemd/system
and editing them.

The configuration file for the web application is installed in
/etc/amusewiki.conf

Supported databases are sqlite, postgresql and mysql, choice is
prompted by dbconfig-common and it's highly recommended to think ahead
and use the managed installation. Using postgresql is the safe and
recommended choice.

The credentials used by the application reside in
/var/lib/amusewiki/dbic.yaml. Please note that dbconfig-common is used
only to create and remove the database. If you run dpkg-reconfigure to
change database, you need to remove this file, prompting the
application to bootstrap it again.

Changing database at later stage is doable, but things could get messy
if you want to carry over site settings, users, queues, etc.

So, if you want to change engine ensure you have an empty publish
queue over all the sites you manage.

Archive integrity, however, is guaranteed, because they don't reside
in the database.

* ADVANCED TOPIC: HOW TO CHANGE THE DATABASE ENGINE

Empty the queue of the sites, either publishing or trashing pending
revisions. Ensure the job queue is empty via the admin interface.
You're going to lose them.

Stop the application.

# systemctl stop amusewiki-*

Login as amusewiki.

# amusewiki shell

Export the current sites:

$ pwd # should be /var/lib/amusewiki
$ amusewiki-clone-site export --directory backup

There are two example configuration files at:

/usr/share/doc/amusewiki/dbic.yaml.mysql.example  (mysql)
/usr/share/doc/amusewiki/dbic.yaml.pg.example     (postgres)

Copy the one you want to use into /var/lib/amusewiki/dbic.yaml,
overwriting the existing one (which is just a copy of
/usr/share/doc/amusewiki/dbic.yaml.sqlite.example).

Create a database

For postgresql:

 su - postgres
 psql
 create user amuse with password 'XXXX';
 create database amuse owner amuse;

For mysql:

  mysql> create database amuse DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  mysql> grant all privileges on amuse.* to amuse@localhost identified by 'XXX';

Adjust the new dbic.yaml with database name, username and password.

Recreate the initial site and the first amusewiki root user, reimport
the existing settings and users, and reindex the archive.

$ amusewiki-create-doc-site
$ amusewiki-clone-site import backup/*
$ amusewiki-bootstrap-archive

Restart the app.

# systemctl start amusewiki-*

** ADVANCED TOPIC: HOW TO MIGRATE FROM A PLAIN INSTALLATION TO A PACKAGED INSTALLATION

Here we assume to have a plain installation in /home/amuse/amusewiki
(user: amuse) and we are going to install the debian package, keeping
the same database engine (postgresql).

The operation is a bit tricky but it's totally doable.

One solution is to bootstrap the sites again, using the same procedure
of the site switching. In case of large archives, this is not the best
solution (even if viable).

** As existing user "amuse"

Stop the application, dump the db, change the path in it, do a backup copy.

  cd $HOME/amusewiki
  ./init-all.sh stop
  pg_dump amuse > amuse-$(date -I).sql
  # this is hacky, but will do.
  sed -e 's,/home/amuse/amusewiki,/var/lib/amusewiki,g' amuse-2016-05-05.sql > $HOME/amuse-migrated.sql
  crontab -l

Remove existing cronjobs, if any.

Do a backup of the whole directory, as root is going to move the files.

** As root

Remove existing nginx settings and cronjobs, install the package, stop
the services, move the files, chown everything to the new user.

 rm /etc/nginx/sites-enabled/amusewiki
 rm /etc/nginx/amusewiki_include
 apt-get install --no-install-recommends amusewiki
 systemctl status amusewiki-*
 systemctl stop amusewiki-*
 systemctl status amusewiki-*
 cd /var/lib/amusewiki
 mkdir orig
 for i in bbfiles log repo ssl staging xapian; do mv $i orig; mv /home/amuse/amusewiki/$i . ; chown -R amusewiki:amusewiki $i ; done

Create a database for amusewiki as above:

 su - postgres
 psql
 create user amusewiki with password 'XXXX';
 create database amusewiki owner amusewiki;

And create a a new dbic.yaml file in /var/lib/amusewiki as described
in the above section.

** As amusewiki

Load the db and check that everything is fine

 psql amusewiki < ~amuse/amuse-migrated.sql
 amusewiki-bootstrap-archive --refresh
 cp /home/amuse/amusewiki/log4perl.local.conf .

If you have local tex files:

 mkdir -p texmf/tex/generic/amusewiki/data
 cp /home/amuse/texlive/texmf-local/tex/generic/amusewiki/data/* texmf/tex/generic/amusewiki/data
 texhash ~/texmf

Regenerate the nginx conf:

 amusewiki-generate-nginx-conf

*** As root again

Execute the output from amusewiki's amusewiki-generate-nginx-conf to
reload the webserver and start the services:

 apt-get install libdbd-pg-perl
 diff -Nu /etc/nginx/amusewikidebian_include /tmp/nginx-amusewiki-57xuuxvE/amusewikidebian_include
 cat /tmp/nginx-amusewiki-57xuuxvE/amusewikidebian_include > /etc/nginx/amusewikidebian_include
 diff -Nu /etc/nginx/sites-enabled/amusewikidebian /tmp/nginx-amusewiki-57xuuxvE/amusewikidebian
 cat /tmp/nginx-amusewiki-57xuuxvE/amusewikidebian > /etc/nginx/sites-enabled/amusewikidebian
 nginx -t && service nginx reload
 systemctl start amusewiki-*
 systemctl status amusewiki-*

If you had the git-daemon enabled:

 cd /var/lib/git
 for i in /var/lib/amusewiki/repo/*; do if [ -d "$i/.git" ]; then echo $(basename $i); rm  $(basename $i).git ; ln -s $i/.git $(basename $i).git ; fi ; done
 service git-daemon restart

If something goes wrong, you can revert to the bootstrapping tecnique
described above.

 -- Marco Pessotto <melmothx@gmail.com>, Fri, 25 Nov 2016 11:10:05 +0100
